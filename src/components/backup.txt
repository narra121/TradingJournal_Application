import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import {
  Star,
  Upload,
  X,
  AlertTriangle,
  TrendingUp,
  BarChart,
} from "lucide-react";
import { ImageType, Trade, TradeDetails, uploadImages } from "@/app/traceSlice";
import { useSelector } from "react-redux";
import { RootState } from "@/app/store";
import { getDownloadURL, ref, uploadBytes } from "firebase/storage";
import { storage } from "@/app/firebase";

interface TradeJournalDialogProps {
  isOpen: boolean;
  onClose: () => void;
  trade: TradeDetails;
  // onSave?: (updatedTrade: Trade) => void; // Optional onSave prop
}

export function TradeJournalDialog({
  isOpen,
  onClose,
  trade,
}: TradeJournalDialogProps) {
  const [images, setImages] = useState<
    { file: File; timeframe: string; description: string }[]
  >([]);
  const tradeData: Trade = useSelector(
    (state: RootState) =>
      state.TradeData.trades.find((t) => t.trade.tradeId === trade.tradeId)!
  );

  // Initial state for form data, populated with existing tradeData or defaults
  const [psychology, setPsychology] = useState<Trade["psychology"]>({
    isGreedy: tradeData?.psychology?.isGreedy || false,
    isFomo: tradeData?.psychology?.isFomo || false,
    isRevenge: tradeData?.psychology?.isRevenge || false,
    emotionalState: tradeData?.psychology?.emotionalState || "",
    notes: tradeData?.psychology?.notes || "",
  });

  const [analysis, setAnalysis] = useState<Trade["analysis"]>({
    riskRewardRatio: tradeData?.analysis?.riskRewardRatio || 0,
    setupType: tradeData?.analysis?.setupType || "",
    mistakes: tradeData?.analysis?.mistakes || [],
  });

  const [metrics, setMetrics] = useState<Trade["metrics"]>({
    riskPerTrade: tradeData?.metrics?.riskPerTrade || 0,
    stopLossDeviation: tradeData?.metrics?.stopLossDeviation || 0,
    targetDeviation: tradeData?.metrics?.targetDeviation || 0,
    marketConditions: tradeData?.metrics?.marketConditions || "",
    tradingSession: tradeData?.metrics?.tradingSession || "",
  });

  const emotionalStates = [
    "Calm",
    "Anxious",
    "Excited",
    "Fearful",
    "Confident",
  ];
  const setupTypes = [
    "Breakout",
    "Pullback",
    "Trend Following",
    "Counter-trend",
    "Range",
  ];
  const timeframes = ["1m", "5m", "15m", "1h", "4h", "1d"];
  const sessions = ["Pre-market", "Regular", "After-hours"];
  const marketConditions = ["Trending", "Ranging", "Volatile", "Calm"];
  const tradeMistakes = [
    "Early Entry",
    "Late Entry",
    "Wrong Position Size",
    "Moved Stop Loss",
    "Early Exit",
  ];

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      const newImages = Array.from(files).map((file) => ({
        file,
        timeframe: "15m", // Default timeframe
        description: "",
      }));
      setImages([...images, ...newImages]);
    }
  };

  const removeImage = (index: number) => {
    setImages(images.filter((_, i) => i !== index));
  };

  const uploadImages = async (
    imageObjects: {
      file: File;
      timeframe: string;
      description: string;
    }[]
  ) => {
    const uploadedImages: ImageType[] = [];

    // Use Promise.all for concurrent uploads
    await Promise.all(
      imageObjects.map(async (imageObject) => {
        const storageRef = ref(storage, `images/${imageObject.file.name}`); // Use the file's name
        const snapshot = await uploadBytes(storageRef, imageObject.file); // Upload the File object
        const downloadURL = await getDownloadURL(snapshot.ref);

        // Create a new object with the URL.  Don't mutate the original.
        uploadedImages.push({
          timeframe: imageObject.timeframe,
          description: imageObject.description,
          url: downloadURL, // Now we have the URL
        });
      })
    );

    return uploadedImages;
  };
  const handleSave = () => {
    (async () => {
      const processedImages = await uploadImages(images); // Upload images to server
      // const processedImages = images.map((image) => ({
      //   url: URL.createObjectURL(image.file), //  Consider a more robust solution for production (e.g., uploading to a server)
      //   timeframe: image.timeframe,
      //   description: image.description,
      // }));

      const updatedTrade = {
        ...tradeData, // Keep existing trade data
        trade: { ...tradeData.trade }, // include basic tradeInfo
        images: processedImages, // Ensure processedImages is of the correct type
        psychology,
        analysis,
        metrics,
      };

      // Call onSave prop with updated trade data
      onClose();
      // Use updatedTrade here, e.g., call onSave if it exists
      // onSave && onSave(updatedTrade);
    })();
  };

  const handlePsychologyChange = (
    field: keyof Trade["psychology"],
    value: any
  ) => {
    setPsychology((prev) => ({ ...prev, [field]: value }));
  };

  const handleAnalysisChange = (field: keyof Trade["analysis"], value: any) => {
    setAnalysis((prev) => ({ ...prev, [field]: value }));
  };

  const handleMetricsChange = (field: keyof Trade["metrics"], value: any) => {
    setMetrics((prev) => ({ ...prev, [field]: value }));
  };
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-[90vw] h-[90vh] flex gap-4">
        <div className="w-1/5 border-r pr-4">
          <DialogHeader>
            <DialogTitle>Trade Details</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 mt-4">
            <div>
              <Label>Symbol</Label>
              <p className="text-lg font-bold">{tradeData.trade.symbol}</p>
            </div>
            <div>
              <Label>Side</Label>
              <p
                className={`text-lg font-bold ${
                  tradeData.trade.side === "buy"
                    ? "text-green-500"
                    : "text-red-500"
                }`}
              >
                {tradeData.trade.side.toUpperCase()}
              </p>
            </div>
            <div>
              <Label>Entry Price</Label>
              <p className="text-lg">${tradeData.trade.entry}</p>
            </div>
            <div>
              <Label>Exit Price</Label>
              <p className="text-lg">${tradeData.trade.exit}</p>
            </div>
            <div>
              <Label>Quantity</Label>
              <p className="text-lg">{tradeData.trade.qty}</p>
            </div>
            <div>
              <Label>Profit/Loss</Label>
              <p
                className={`text-lg font-bold ${
                  tradeData.trade.pnl >= 0 ? "text-green-500" : "text-red-500"
                }`}
              >
                ${tradeData.trade.pnl}
              </p>
            </div>
          </div>
        </div>

        <div className="w-4/5 overflow-y-auto">
          <div className="grid grid-cols-2 gap-6">
            <div className="space-y-4">
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <AlertTriangle className="w-5 h-5" /> Trade Psychology
              </h3>
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="greedy"
                    checked={psychology.isGreedy}
                    onCheckedChange={(checked) =>
                      handlePsychologyChange("isGreedy", checked)
                    }
                  />
                  <Label htmlFor="greedy">Greedy Trade</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="fomo"
                    checked={psychology.isFomo}
                    onCheckedChange={(checked) =>
                      handlePsychologyChange("isFomo", checked)
                    }
                  />
                  <Label htmlFor="fomo">FOMO Trade</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="revenge"
                    checked={psychology.isRevenge}
                    onCheckedChange={(checked) =>
                      handlePsychologyChange("isRevenge", checked)
                    }
                  />
                  <Label htmlFor="revenge">Revenge Trade</Label>
                </div>
              </div>
              <div className="space-y-2">
                <Label>Emotional State</Label>
                <Select
                  value={psychology.emotionalState}
                  onValueChange={(value) =>
                    handlePsychologyChange("emotionalState", value)
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select emotional state" />
                  </SelectTrigger>
                  <SelectContent>
                    {emotionalStates.map((state) => (
                      <SelectItem key={state} value={state.toLowerCase()}>
                        {state}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label>Trade Notes</Label>
                <Textarea
                  placeholder="Enter your trade notes here..."
                  value={psychology.notes}
                  onChange={(e) =>
                    handlePsychologyChange("notes", e.target.value)
                  }
                />
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <TrendingUp className="w-5 h-5" /> Trade Analysis
              </h3>
              <div className="space-y-2">
                <Label>Risk/Reward Ratio</Label>
                <Input
                  type="number"
                  step="0.1"
                  placeholder="Enter R:R ratio"
                  value={analysis.riskRewardRatio || ""}
                  onChange={(e) =>
                    handleAnalysisChange(
                      "riskRewardRatio",
                      parseFloat(e.target.value) || 0
                    )
                  }
                />
              </div>
              <div className="space-y-2">
                <Label>Setup Type</Label>
                <Select
                  value={analysis.setupType}
                  onValueChange={(value) =>
                    handleAnalysisChange("setupType", value)
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select setup type" />
                  </SelectTrigger>
                  <SelectContent>
                    {setupTypes.map((type) => (
                      <SelectItem key={type} value={type.toLowerCase()}>
                        {type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label>Trade Mistakes</Label>
                <div className="space-y-2">
                  {tradeMistakes.map((mistake) => (
                    <div key={mistake} className="flex items-center space-x-2">
                      <Checkbox
                        id={mistake.toLowerCase().replace(/\s/g, "-")}
                        checked={analysis.mistakes.includes(
                          mistake.toLowerCase()
                        )}
                        onCheckedChange={(checked) => {
                          const updatedMistakes = checked
                            ? [...analysis.mistakes, mistake.toLowerCase()]
                            : analysis.mistakes.filter(
                                (m) => m !== mistake.toLowerCase()
                              );
                          handleAnalysisChange("mistakes", updatedMistakes);
                        }}
                      />
                      <Label
                        htmlFor={mistake.toLowerCase().replace(/\s/g, "-")}
                      >
                        {mistake}
                      </Label>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <BarChart className="w-5 h-5" /> Additional Metrics
              </h3>
              <div className="space-y-2">
                <Label>Risk per Trade (%)</Label>
                <Input
                  type="number"
                  step="0.1"
                  placeholder="Enter risk percentage"
                  value={metrics.riskPerTrade || ""}
                  onChange={(e) =>
                    handleMetricsChange(
                      "riskPerTrade",
                      parseFloat(e.target.value) || 0
                    )
                  }
                />
              </div>
              <div className="space-y-2">
                <Label>Stop Loss Deviation</Label>
                <Input
                  type="number"
                  step="0.1"
                  placeholder="Enter stop loss deviation"
                  value={metrics.stopLossDeviation || ""}
                  onChange={(e) =>
                    handleMetricsChange(
                      "stopLossDeviation",
                      parseFloat(e.target.value) || 0
                    )
                  }
                />
              </div>
              <div className="space-y-2">
                <Label>Target Deviation</Label>
                <Input
                  type="number"
                  step="0.1"
                  placeholder="Enter target deviation"
                  value={metrics.targetDeviation || ""}
                  onChange={(e) =>
                    handleMetricsChange(
                      "targetDeviation",
                      parseFloat(e.target.value) || 0
                    )
                  }
                />
              </div>
              <div className="space-y-2">
                <Label>Market Conditions</Label>
                <Select
                  value={metrics.marketConditions}
                  onValueChange={(value) =>
                    handleMetricsChange("marketConditions", value)
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select market condition" />
                  </SelectTrigger>
                  <SelectContent>
                    {marketConditions.map((condition) => (
                      <SelectItem
                        key={condition}
                        value={condition.toLowerCase()}
                      >
                        {condition}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label>Trading Session</Label>
                <Select
                  value={metrics.tradingSession}
                  onValueChange={(value) =>
                    handleMetricsChange("tradingSession", value)
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select trading session" />
                  </SelectTrigger>
                  <SelectContent>
                    {sessions.map((session) => (
                      <SelectItem key={session} value={session.toLowerCase()}>
                        {session}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <Upload className="w-5 h-5" /> Image Documentation
              </h3>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="image-upload" className="cursor-pointer">
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors">
                      <Upload className="w-8 h-8 mx-auto mb-2" />
                      <p>Click to upload images</p>
                    </div>
                  </Label>
                  <input
                    id="image-upload"
                    type="file"
                    multiple
                    accept="image/*"
                    className="hidden"
                    onChange={handleImageUpload}
                    title="Upload images"
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  {images.map((image, index) => (
                    <div
                      key={index}
                      className="border rounded-lg p-4 space-y-2"
                    >
                      <div className="relative">
                        <img
                          src={URL.createObjectURL(image.file)}
                          alt={`Trade image ${index + 1}`}
                          className="w-full h-40 object-cover rounded"
                        />
                        <Button
                          variant="destructive"
                          size="icon"
                          className="absolute top-2 right-2"
                          onClick={() => removeImage(index)}
                        >
                          <X className="w-4 h-4" />
                        </Button>
                      </div>
                      <Select
                        value={image.timeframe}
                        onValueChange={(value) => {
                          const newImages = [...images];
                          newImages[index].timeframe = value;
                          setImages(newImages);
                        }}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select timeframe" />
                        </SelectTrigger>
                        <SelectContent>
                          {timeframes.map((tf) => (
                            <SelectItem key={tf} value={tf}>
                              {tf}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <Textarea
                        placeholder="Image description"
                        value={image.description}
                        onChange={(e) => {
                          const newImages = [...images];
                          newImages[index].description = e.target.value;
                          setImages(newImages);
                        }}
                      />
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
          <Button onClick={handleSave}>Save</Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
